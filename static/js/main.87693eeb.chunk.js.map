{"version":3,"sources":["assets/Logo-kadaster.png","routes/components/StartScreen.js","routes/components/ResultScreen.js","model/Resultaat.js","network/SparqlCommunicator.js","routes/components/ObjectScreen.js","routes/Routes.js","components/NavBar.js","components/Loader.js","model/ResultatenHouder.js","model/ClickedResultaat.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StartScreen","className","React","Component","ResultScreen","elements","this","props","res","getResults","map","pElementHoofd","pElementSub","getNaam","getType","String","fromCharCode","key","getUrl","onClick","onClickItem","Resultaat","url","_url","_naam","undefined","_type","_geoJson","_subscribers","naam","type","geojson","upDateSubScribers","subscriber","update","push","filter","subscriberList","properties","geometry","getGeoJson","latestString","text","a","queryTriply","query","firstLetterCapital","exactMatch","queryString","result","status","makeSearchScreenResults","JSON","parse","mergeResults","clickedRes","nodes","results","bindings","types","overigeAttributen","i","length","prd","value","obj","naamNl","naamFries","seperateUpperCase","stripUrlToType","loadInAttributes","string","split","forEach","index","arr","charAt","toLowerCase","slice","join","replace","returnObject","resultaatObj","then","naamPlaats","console","log","Error","wktJson","wellKnown","setSecondProperties","s","toUpperCase","substring","exact","regex","resexact","resregex","concat","fetch","method","headers","body","ObjectScreen","getNamenGegevens","sparql","clickedResult","setState","state","tableNamen","tableRest","getTypeString","getNaamFries","getNaamNl","attributes","getAttributes","startsWith","href","Routes","path","component","render","EmptyBar","class_","loading","BackButton","onBack","NavBar","Loader","width","color","height","ResultatenHouder","_results","_clickedResult","clicked","subscribe","unsubscribe","getAsFeature","ClickedResultaat","_res","_naamNL","_naamFries","_types","_overige","naamnl","naamfries","overige","unshift","App","mapInit","L","minZoom","center","zoom","maxBounds","tileLayer","attribution","addTo","on","handleDoubleClick","doubleClickZoom","disable","geoJsonLayer","geoJSON","onEachFeature","addCenterMarker","pointToLayer","addMarker","markerGroup","featureGroup","feature","latlng","marker","bindPopup","autoPan","closeButton","e","openPopup","closePopup","layer","centroid","turf","lon","coordinates","lat","setClickedResult","getCenterGeoJson","getZoom","setView","history","onSearchChange","data","searchQuery","clearClickedResult","doSearch","location","pathname","goBack","clearAll","go","isFetching","Sparql","trim","setResults","handleDeleteClick","clearResults","handleOnBackButtonClick","match","matchPath","strict","bounds","getBounds","getEast","getWest","fitBounds","pad","clearLayers","getClickedResult","addData","geoJsonResults","getAllObjectsAsFeature","icon","Icon","name","link","to","src","KadasterImg","alt","Search","input","fluid","noResultsMessage","open","id","withRouter","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.87693eeb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo-kadaster.5d975e1b.png\";","import React from 'react';\r\n\r\nclass StartScreen extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"startScreen\">\r\n                <p className=\"boldHeaderText\">Wat is het?</p>\r\n                <p className=\"explainText\">Dit is een applicatie die objecten uit de brt haalt. Denk hierbij\r\n                    aan buurten, straaten, meren en zelf bomen. Deze objecten hebben allemaal een naam.\r\n                    Aan de hand van deze naam kan je de objecten ophalen. Deze objecten hebben ook andere\r\n                    eigenschappen die je kunt bekijken. (nog aanvullen)</p>\r\n                <p className=\"boldHeaderText\">Wie doe dit?</p>\r\n                <p className=\"explainText\">brt (nog aanvullen)</p>\r\n                <p className=\"boldHeaderText\">Hoe werkt het?</p>\r\n                <p className=\"explainText\">Deze applicatie kan op twee manieren aangestuurd worden. Je kan\r\n                    een naam zoeken in het\r\n                    zoekveld. Je kan ook dubbel klikken op de kaart om de nabije namen op te vragen.</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StartScreen;","import React from 'react';\r\n\r\nclass ResultScreen extends React.Component {\r\n    render() {\r\n        let results = this.props.res.getResults();\r\n\r\n        let elements = results.map(res => {\r\n            let pElementHoofd = (<p className= \"hoofdText\">&nbsp;</p>)\r\n            let pElementSub = (<p className= \"subText\">&nbsp;</p>)\r\n\r\n            if(res.getNaam()){\r\n                pElementHoofd = (<p className= \"hoofdText\">{res.getNaam()}</p>);\r\n            }\r\n\r\n            if(res.getType()){\r\n                pElementSub = (<p className= \"subText\">{res.getType() ? res.getType() : String.fromCharCode(32)}</p>);\r\n            }\r\n\r\n            return (<li key={res.getUrl() + res.getNaam()}\r\n                        className=\"liResultScreen\"\r\n                        onClick={() => {this.props.onClickItem(res)}}>\r\n                {pElementHoofd}\r\n                {pElementSub}\r\n            </li>)\r\n        });\r\n\r\n        return(\r\n            <div className=\"homeScreen\">\r\n                <ul>\r\n                    {elements}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ResultScreen;","class Resultaat {\r\n    constructor(url){\r\n        this._url = url;\r\n\r\n        this._naam = undefined;\r\n        this._type = undefined;\r\n        this._geoJson = undefined;\r\n\r\n        this._subscribers = [];\r\n    }\r\n\r\n    setSecondProperties(naam, type, geojson){\r\n        this._type = type;\r\n        this._naam = naam;\r\n        this._geoJson = geojson;\r\n\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    getNaam(){\r\n        return this._naam;\r\n    }\r\n\r\n    getUrl(){\r\n        return this._url;\r\n    }\r\n\r\n    getType(){\r\n        return this._type;\r\n    }\r\n\r\n    getGeoJson(){\r\n        return this._geoJson;\r\n    }\r\n\r\n    upDateSubScribers(){\r\n        this._subscribers.map(subscriber => subscriber.update());\r\n    }\r\n\r\n    subscribe(subscriber){\r\n        this._subscribers.push(subscriber);\r\n    }\r\n\r\n    unsubscribe(subscriber){\r\n        this._subscribers.filter(subscriberList  => {\r\n            return subscriberList !== subscriber;\r\n        });\r\n    }\r\n\r\n    getAsFeature(){\r\n        return  {\r\n            type: \"Feature\",\r\n            properties: this,\r\n            geometry: this.getGeoJson()\r\n        }\r\n    }\r\n}\r\n\r\nexport default Resultaat;","import Resultaat from \"../model/Resultaat\";\r\nimport * as wellKnown from 'wellknown'\r\n\r\nlet latestString = \"\";\r\n\r\nexport async function getMatch(text) {\r\n    latestString = text;\r\n\r\n    let exactMatch = await queryTriply(nameQueryExactMatch(firstLetterCapital(text)));\r\n    // let exactMatch = await queryPDOK(nameQueryExactMatchPDOK(firstLetterCapital(text)));\r\n    let result = await queryTriply(nameQueryForRegexMatch(text));\r\n\r\n    if (latestString !== text) {\r\n        return undefined;\r\n    } else if (result.status > 300 || exactMatch.status > 300) {\r\n        return \"error\";\r\n    }\r\n\r\n    exactMatch = await exactMatch.text();\r\n    result = await result.text();\r\n\r\n    exactMatch = makeSearchScreenResults(JSON.parse(exactMatch));\r\n    result = makeSearchScreenResults(JSON.parse(result));\r\n\r\n    return mergeResults(exactMatch, result);\r\n}\r\n\r\nexport async function getAllAttribtes(clickedRes) {\r\n    let url = clickedRes.getUrl();\r\n\r\n    let res = await queryTriply(allAttributesFromUrl(url));\r\n    res = await res.text();\r\n    res = JSON.parse(res);\r\n\r\n    let nodes = res.results.bindings;\r\n\r\n    let naam;\r\n    let naamNl;\r\n    let naamFries;\r\n    let types = [];\r\n    let overigeAttributen = [];\r\n\r\n    for (let i = 0; i < nodes.length; i++) {\r\n        let key = nodes[i].prd.value;\r\n        let value = nodes[i].obj.value;\r\n\r\n        if (key === \"http://brt.basisregistraties.overheid.nl/def/top10nl#naam\") {\r\n            naam = value;\r\n        } else if (key === \"http://brt.basisregistraties.overheid.nl/def/top10nl#naamNL\") {\r\n            naamNl = value;\r\n        } else if (key === \"http://brt.basisregistraties.overheid.nl/def/top10nl#naamFries\") {\r\n            naamFries = value;\r\n        } else if (key === \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\") {\r\n            types.push(seperateUpperCase(stripUrlToType(value)));\r\n        } else {\r\n            overigeAttributen.push({key: stripUrlToType(key), value: value});\r\n        }\r\n    }\r\n\r\n    clickedRes.loadInAttributes(naam, naamNl, naamFries, types, overigeAttributen);\r\n}\r\n\r\nfunction seperateUpperCase(string) {\r\n    string = string.split(/(?=[A-Z])/);\r\n    string.forEach((res, index, arr) => {\r\n\r\n            if (index !== 0) {\r\n                arr[index] = arr[index].charAt(0).toLowerCase() + arr[index].slice(1)\r\n            }\r\n        }\r\n    )\r\n\r\n    return  string.join(\" \");\r\n}\r\n\r\nfunction stripUrlToType(url) {\r\n    return url.replace(/.*#/, \"\");\r\n}\r\n\r\nfunction makeSearchScreenResults(results) {\r\n    results = results.results.bindings;\r\n    let returnObject = [];\r\n\r\n    for (let i = 0; i < results.length; i++) {\r\n        let resultaatObj = new Resultaat(results[i].obj.value);\r\n\r\n        queryTriply(queryForType(resultaatObj.getUrl())).then(async (res) => {\r\n            res = await res.text();\r\n\r\n            res = JSON.parse(res);\r\n            res = res.results.bindings;\r\n\r\n            if (res.length !== 0) {\r\n                res = res[res.length - 1];\r\n\r\n                let naamPlaats;\r\n                let type;\r\n                let geojson;\r\n\r\n                if (res.naam) {\r\n                    naamPlaats = res.naam.value;\r\n                } else if (res.naamNl) {\r\n                    naamPlaats = res.naamNl.value;\r\n                } else if (res.naamFries) {\r\n                    naamPlaats = res.naamFries.value;\r\n                } else {\r\n                    console.log(res);\r\n                    console.log(resultaatObj);\r\n                    throw Error(\"No name\");\r\n                }\r\n\r\n                if (res.type !== undefined) {\r\n                    let value = res.type.value;\r\n                    type = value.replace(/.*#/, \"\");\r\n                    type = seperateUpperCase(type);\r\n                }\r\n\r\n                if (res.wktJson !== undefined) {\r\n                    let wktJson = res.wktJson.value;\r\n                    geojson = wellKnown.parse(wktJson);\r\n                }\r\n\r\n                resultaatObj.setSecondProperties(naamPlaats, type, geojson);\r\n\r\n            } else {\r\n                console.log(\"error: \", res, resultaatObj);\r\n            }\r\n\r\n        });\r\n\r\n        returnObject.push(resultaatObj);\r\n    }\r\n\r\n    return returnObject;\r\n}\r\n\r\nfunction firstLetterCapital(text) {\r\n    return text.toLowerCase()\r\n        .split(' ')\r\n        .map((s) => s.charAt(0).toUpperCase() + s.substring(1))\r\n        .join(' ');\r\n}\r\n\r\nfunction mergeResults(exact, regex) {\r\n    exact.forEach(resexact => {\r\n            regex = regex.filter(resregex => {\r\n                return resexact.getUrl() !== resregex.getUrl();\r\n            });\r\n        }\r\n    );\r\n\r\n    return exact.concat(regex);\r\n}\r\n\r\nasync function queryTriply(query) {\r\n    let result = await fetch(\"https://api.kadaster.triply.cc/datasets/kadaster/brt/services/brt/sparql\", {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/sparql-query',\r\n            'Accept': 'application/sparql-results+json'\r\n        },\r\n        body: query\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\nasync function queryPDOK(query) {\r\n    let result = await fetch(\"https://data.pdok.nl/sparql\", {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/sparql-query',\r\n            'Accept': 'application/sparql-results+json'\r\n        },\r\n        body: query\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\nfunction nameQueryExactMatch(query) {\r\n    return `PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n            PREFIX brt: <http://brt.basisregistraties.overheid.nl/def/top10nl#>\r\n            \r\n            SELECT distinct * WHERE {\r\n              {?obj brt:naamNL \"${query}\".} union {?obj brt:naam \"${query}\".} union {?obj brt:Fries \"${query}\".}\r\n            }\r\n`\r\n}\r\n\r\nfunction nameQueryExactMatchPDOK(query) {\r\n    return `PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n            PREFIX brt: <http://brt.basisregistraties.overheid.nl/def/top10nl#>\r\n            \r\n            SELECT distinct * WHERE {\r\n              {?obj brt:naamNL \"${query}\"@nl.} union {?obj brt:naam \"${query}\"@nl.} union {?obj brt:Fries \"${query}\"@fy.}\r\n            }\r\n`\r\n}\r\n\r\nfunction nameQueryForRegexMatch(queryString) {\r\n    return `PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n            PREFIX brt: <http://brt.basisregistraties.overheid.nl/def/top10nl#>\r\n            \r\n            SELECT distinct ?obj WHERE {\r\n            { ?obj brt:naam ?label } UNION { ?obj brt:naamNL ?label } UNION {?obj brt:naamFries ?label}.\r\n              \r\n              FILTER(REGEX(?label, \"${queryString}\", \"i\") || REGEX(?naamNl, \"${queryString}\", \"i\") || REGEX(?naamFries, \"${queryString}\", \"i\")).\r\n            }\r\n            LIMIT 20\r\n            `\r\n}\r\n\r\nfunction queryForType(queryString) {\r\n    return `PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n            PREFIX brt: <http://brt.basisregistraties.overheid.nl/def/top10nl#>\r\n            PREFIX geo: <http://www.opengis.net/ont/geosparql#>\r\n\r\n            SELECT distinct * WHERE {\r\n               <${queryString}> a ?type\r\n             \r\n              Optional{<${queryString}> brt:naam ?naam.}.\r\n              Optional{<${queryString}> brt:naamNL ?naamNl.}.\r\n              Optional{<${queryString}> brt:naamFries ?naamFries}.\r\n              Optional{<${queryString}> geo:hasGeometry/geo:asWKT ?wktJson}.                \r\n            }`\r\n}\r\n\r\nfunction allAttributesFromUrl(namedNode) {\r\n    return `PREFIX brt: <http://brt.basisregistraties.overheid.nl/def/top10nl#>\r\n            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n\r\n            SELECT * WHERE {\r\n                <${namedNode}> ?prd ?obj.\r\n            }`\r\n}\r\n","import React from 'react';\r\nimport * as sparql from '../../network/SparqlCommunicator';\r\n\r\nclass ObjectScreen extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            res: undefined\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getNamenGegevens(this.props.clickedResult);\r\n    }\r\n\r\n    getNamenGegevens = (url) => {\r\n        if (url) {\r\n            sparql.getAllAttribtes(this.props.clickedResult).then(res => {\r\n                this.setState({\r\n                    res: this.props.clickedResult\r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let res = this.state.res;\r\n        let naam;\r\n        let type;\r\n        let tableNamen;\r\n        let tableRest\r\n\r\n        if (res) {\r\n            naam = (<h1>{res.getNaam()}</h1>);\r\n            type = (<h3>{res.getTypeString()}</h3>);\r\n\r\n            let naamNl;\r\n            let naamFries;\r\n\r\n            if (res.getNaamFries()) {\r\n                naamFries = (\r\n                    <tr>\r\n                        <td><b>Naam Fries:</b></td>\r\n                        <td>{res.getNaamFries()}</td>\r\n                    </tr>\r\n                )\r\n            }\r\n\r\n            if (res.getNaamNl() || res.getNaamFries() === undefined) {\r\n                naamNl = (\r\n                    <tr>\r\n                        <td><b>Naam Nederlands:</b></td>\r\n                        <td>{res.getNaamNl() ? res.getNaamNl() : res.getNaam()}</td>\r\n                    </tr>\r\n                )\r\n            }\r\n\r\n            tableNamen = (\r\n                <div>\r\n                    <table className=\"namenTable\">\r\n                        <tbody>\r\n                            {naamNl}\r\n                            {naamFries}\r\n                        </tbody>\r\n                    </table>\r\n                    <hr/>\r\n                </div>\r\n            );\r\n\r\n            let attributes = res.getAttributes().map(res => {\r\n                let value = res.value;\r\n\r\n                if(value.startsWith(\"http://\")){\r\n                    value = (<a href={value}>{value}</a>);\r\n                }\r\n\r\n                return (<tr key = {res.key + res.value}>\r\n                    <td>{res.key}</td>\r\n                    <td>{value}</td>\r\n                </tr>)\r\n            })\r\n\r\n            tableRest = (\r\n\r\n                <table className=\"attributeSectionObjectScreen\">\r\n                    <tbody>\r\n                    {attributes}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"objectScreen\">\r\n                {naam}\r\n                {type}\r\n                {tableNamen}\r\n                {tableRest}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ObjectScreen;","import React from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\n\r\nimport StartScreen from \"./components/StartScreen\";\r\nimport ResultScreen from \"./components/ResultScreen\";\r\nimport ObjectScreen from \"./components/ObjectScreen\";\r\n\r\nclass Routes extends React.Component{\r\n\r\n    render() {\r\n        return(\r\n            <Switch>\r\n                <Route exact path=\"/\" component={StartScreen}/>\r\n                <Route\r\n                    exact path=\"/result\"\r\n                    render={(props) => <ResultScreen res = {this.props.res} onClickItem = {this.props.onClickItem}/>}\r\n                />\r\n\r\n                <Route\r\n                    exact path=\"/result/:id\"\r\n                    render={(props) => <ObjectScreen clickedResult = {this.props.clickedResult}/>}\r\n                />\r\n            </Switch>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Routes;","import React from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\n\r\n\r\nclass NavBar extends React.Component{\r\n    render() {\r\n        return(\r\n            <Switch>\r\n                <Route exact path=\"/\"\r\n                       render={(props) => <EmptyBar loading = {this.props.loading}/>}\r\n                />\r\n                <Route\r\n                    render={(props) => <BackButton loading = {this.props.loading} onBack = {this.props.onBack}/>}\r\n                />\r\n            </Switch>\r\n        )\r\n    }\r\n}\r\n\r\nfunction EmptyBar(props){\r\n    let class_ = \"nonLoadingButton\";\r\n\r\n    if( props.loading){\r\n        class_ = \"loadingButton\";\r\n    }\r\n\r\n    return (\r\n        <div className={\"backButton  \" + class_}><p>&nbsp;</p></div>\r\n    )\r\n}\r\n\r\nfunction BackButton(props){\r\n    let class_ = \"nonLoadingButton\";\r\n\r\n    if( props.loading){\r\n        class_ = \"loadingButton\";\r\n    }\r\n\r\n    return (\r\n        <div className={\"backButton cursorPointer \" + class_} onClick={props.onBack}><p>&larr; Terug</p></div>\r\n    )\r\n}\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport {BarLoader} from \"react-spinners\";\r\n\r\n\r\nclass Loader extends React.Component{\r\n    render() {\r\n        return(\r\n            <BarLoader\r\n                loading = {this.props.loading}\r\n                width = {\"100%\"}\r\n                color = {\"#6495ED\"}\r\n                height = {4}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Loader;","class ResultatenHouder {\r\n    constructor(){\r\n        this._results = [];\r\n        this._clickedResult = undefined;\r\n\r\n        this._subscribers = [];\r\n    }\r\n\r\n    upDateSubScribers(){\r\n        this._subscribers.map(subscriber => subscriber.update());\r\n    }\r\n\r\n    subscribe(subscriber){\r\n        this._subscribers.push(subscriber);\r\n    }\r\n\r\n    unsubscribe(subscriber){\r\n        this._subscribers.filter(subscriberList  => {\r\n            return subscriberList !== subscriber;\r\n        });\r\n    }\r\n\r\n    setClickedResult(clicked){\r\n        this._clickedResult = clicked;\r\n        this._clickedResult.subscribe(this);\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    getClickedResult(){\r\n        return this._clickedResult;\r\n    }\r\n\r\n    clearClickedResult(){\r\n        if(this._clickedResult){\r\n            this._clickedResult.unsubscribe(this);\r\n            this._clickedResult = undefined;\r\n            this.upDateSubScribers();\r\n        }\r\n    }\r\n\r\n    clearAll(){\r\n        if(this._clickedResult){\r\n            this._clickedResult.unsubscribe(this);\r\n            this._clickedResult = undefined;\r\n        }\r\n\r\n        this._results.forEach(res => {\r\n            res.unsubscribe(this);\r\n        })\r\n\r\n        this._results = [];\r\n\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    setResults(results){\r\n\r\n        this._results.forEach(res => {\r\n            res.unsubscribe(this);\r\n        })\r\n\r\n        results.forEach(res => {\r\n            res.subscribe(this);\r\n        })\r\n\r\n        this._results = results;\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    getResults(){\r\n        return this._results;\r\n    }\r\n\r\n    clearResults(){\r\n        this._results.forEach(res => {\r\n            res.unsubscribe(this);\r\n        })\r\n\r\n        this._results = [];\r\n\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    update(){\r\n        this.upDateSubScribers();\r\n    }\r\n\r\n    getAllObjectsAsFeature(){\r\n        let geojson = [];\r\n\r\n        this._results.forEach(res => {\r\n            if(res.getGeoJson()) {\r\n                geojson.push(res.getAsFeature());\r\n            }\r\n        })\r\n        return geojson;\r\n    }\r\n}\r\n\r\nexport default ResultatenHouder;","class ClickedResultaat {\r\n    constructor(res){\r\n        this._res = res;\r\n        this._naam = undefined;\r\n        this._naamNL = undefined;\r\n        this._naamFries = undefined;\r\n        this._types = [];\r\n        this._overige = [];\r\n\r\n        this._subscribers = [];\r\n    }\r\n\r\n    getNaamFries(){\r\n        return this._naamFries;\r\n    }\r\n\r\n    getNaamNl(){\r\n        return this._naamNL;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param naam String\r\n     * @param naamnl String\r\n     * @param naamfries String\r\n     * @param type array Strings\r\n     * @param overige array {key: string, value: string}\r\n     */\r\n    loadInAttributes(naam, naamnl, naamfries, type,  overige){\r\n        this._naam = naam;\r\n        this._naamNL = naamnl;\r\n        this._naamFries = naamfries;\r\n        this._types = type;\r\n        this._overige = overige;\r\n\r\n        let url = this._res.getUrl();\r\n\r\n        this._overige.unshift({key : \"brt link\",value: url})\r\n\r\n        if(this._naam === undefined){\r\n            if(this._naamNL !== undefined){\r\n                this._naam = this._naamNL;\r\n            }else{\r\n                this._naam = this._naamFries;\r\n            }\r\n        }\r\n    }\r\n\r\n    upDateSubScribers(){\r\n        this._subscribers.map(subscriber => subscriber.update());\r\n    }\r\n\r\n    subscribe(subscriber){\r\n        this._subscribers.push(subscriber);\r\n    }\r\n\r\n    unsubscribe(subscriber){\r\n        this._subscribers.filter(subscriberList  => {\r\n            return subscriberList !== subscriber;\r\n        });\r\n    }\r\n\r\n    getUrl(){\r\n        return this._res.getUrl();\r\n    }\r\n\r\n    getNaam(){\r\n        return this._naam;\r\n    }\r\n\r\n    getAsFeature(){\r\n        return this._res.getAsFeature();\r\n    }\r\n\r\n    getTypeString(){\r\n        return this._types.join(\", \");\r\n    }\r\n\r\n    getAttributes(){\r\n        return this._overige;\r\n    }\r\n}\r\n\r\nexport default ClickedResultaat;","/**\n * Libs\n */\nimport L from \"leaflet\";\nimport React from 'react';\nimport * as turf from '@turf/turf'\n\n/**\n * UI\n */\nimport Routes from './routes/Routes'\nimport {Search, Icon} from 'semantic-ui-react'\nimport NavBar from \"./components/NavBar\";\nimport Loader from \"./components/Loader\"\n\n/**\n * Assets\n */\nimport './App.css';\nimport KadasterImg from './assets/Logo-kadaster.png'\n\n/**\n * Netwerk\n */\nimport *  as Sparql from './network/SparqlCommunicator' ;\nimport {Link, withRouter, matchPath} from \"react-router-dom\";\n\n/**\n * Model\n */\nimport ResultatenHouder from './model/ResultatenHouder';\nimport ClickedResultaat from \"./model/ClickedResultaat\";\n\n//  TODO dit is documentatie\n//  Naam is of naam of naamNl\n//\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            searchQuery: \"\",\n            isFetching: false,\n            results: new ResultatenHouder()\n        }\n\n        this.state.results.subscribe(this);\n    }\n\n    componentDidMount() {\n        this.mapInit();\n        this.props.history.push('/');\n    }\n\n    mapInit = () => {\n        this.map = L.map(\n            'map',\n            {\n                minZoom: 7,\n                center: [52.20936, 5.2],\n                zoom: 8,\n                maxBounds: [\n                    [56, 10],\n                    [49, 0],\n                ]\n            });\n\n        L.tileLayer('https://geodata.nationaalgeoregister.nl/tiles/service/wmts/brtachtergrondkaart/EPSG:3857/{z}/{x}/{y}.png', {\n            attribution: 'Kaartgegevens &copy; <a href=\"https://www.kadaster.nl/\">Kadaster</a> | <a href=\"https://www.verbeterdekaart.nl\">Verbeter de kaart</a> '\n        }).addTo(this.map);\n\n        this.map.on('dblclick', this.handleDoubleClick);\n        this.map.doubleClickZoom.disable();\n\n        this.geoJsonLayer = L.geoJSON([], {\n            onEachFeature: this.addCenterMarker,\n            pointToLayer: this.addMarker\n        }).addTo(this.map);\n\n        this.markerGroup = L.featureGroup().addTo(this.map);\n    }\n\n    handleDoubleClick(e){\n        let latLong = e.latlng;\n    }\n\n    addMarker = (feature, latlng) => {\n        let marker = L.marker(latlng).addTo(this.markerGroup);\n\n        marker.bindPopup(`<div class = \"marker\">\n                    <b>${feature.properties.getNaam()}</b>\n                    <br/>\n                    <span class = \"subTextMarker\">${feature.properties.getType()}</span><div>\n            `, {\n            autoPan: false,\n            closeButton: false\n        });\n        marker.on('mouseover', function (e) {\n            this.openPopup();\n        });\n        marker.on('mouseout', function (e) {\n            this.closePopup();\n        });\n\n        marker.on('click', () => {\n            this.onClickItem(feature.properties)\n        });\n    }\n\n    addCenterMarker = (feature, layer) => {\n        if (feature.geometry.type !== 'Point') {\n            var centroid = turf.centroid(feature);\n            var lon = centroid.geometry.coordinates[0];\n            var lat = centroid.geometry.coordinates[1];\n\n            let marker = L.marker([lat, lon]).addTo(this.markerGroup);\n\n            marker.bindPopup(`<div class = \"marker\">\n                    <b>${feature.properties.getNaam()}</b>\n                    <br/>\n                    <span class = \"subTextMarker\">${feature.properties.getType()}</span><div>\n            `, {\n                autoPan: false,\n                closeButton: false\n            });\n\n            marker.on('mouseover', function (e) {\n                this.openPopup();\n            });\n            marker.on('mouseout', function (e) {\n                this.closePopup();\n            });\n\n            marker.on('click', () => {\n                this.onClickItem(feature.properties)\n            });\n\n            layer.bindPopup(`<div class = \"marker\">\n                    <b>${feature.properties.getNaam()}</b>\n                    <br/>\n                    <span class = \"subTextMarker\">${feature.properties.getType()}</span><div>\n            `, {\n                autoPan: false,\n                closeButton: false\n            });\n\n            layer.on('mouseover', function (e) {\n                this.openPopup();\n            });\n            layer.on('mouseout', function (e) {\n                this.closePopup();\n            });\n\n            layer.on('click', () => {\n                this.onClickItem(feature.properties)\n            });\n        }\n    }\n\n    onClickItem = (res) => {\n        let clickedRes = new ClickedResultaat(res);\n        this.state.results.setClickedResult(clickedRes);\n\n        let center = this.getCenterGeoJson(res.getGeoJson());\n        let zoom = this.map.getZoom();\n\n        if(zoom < 10){\n            zoom = 10;\n        }\n\n        this.map.setView(center , zoom);\n\n        this.props.history.push(`/result/${res.getNaam()}`);\n    }\n\n    getCenterGeoJson = (geojson) => {\n        var centroid = turf.centroid(geojson);\n        var lon = centroid.geometry.coordinates[0];\n        var lat = centroid.geometry.coordinates[1];\n\n        return [lat, lon];\n    }\n\n    onSearchChange = (e, data) => {\n        let text = data.value;\n\n        if (text) {\n            this.setState({\n                searchQuery: text\n            })\n\n            this.state.results.clearClickedResult();\n\n            this.doSearch(text);\n\n            if (this.props.location.pathname === \"/\") {\n                this.props.history.push('/result')\n            } else if (this.props.location.pathname !== \"/result\") {\n                this.props.history.goBack();\n            }\n        } else {\n            this.setState({\n                searchQuery: \"\"\n            });\n\n            this.state.results.clearAll();\n\n            if (this.props.location.pathname === \"/result\") {\n                this.props.history.goBack();\n            }else if(this.props.location.pathname !== '/'){\n                this.props.history.go(-2);\n            }\n        }\n\n        if(this.map){\n            this.map.setView([52.20936, 5.2], 8);\n        }\n    }\n\n    doSearch = (text) => {\n        this.setState({\n            isFetching: true\n        });\n\n        Sparql.getMatch(text.trim()).then(res => {\n            if (res === \"error\") {\n                this.setState({\n                    isFetching: false\n                })\n            } else if (res !== undefined) {\n                this.setState({\n                    isFetching: false\n                })\n                this.state.results.setResults(res);\n            }\n        });\n    }\n\n    handleDeleteClick = () => {\n        this.onSearchChange({}, {value: \"\"});\n        this.state.results.clearResults();\n    }\n\n    handleOnBackButtonClick = () => {\n        this.props.history.goBack();\n\n        let match = matchPath( this.props.location.pathname ,{\n            path: \"/result/:id\",\n            exact: true,\n            strict: true\n        })\n\n        if (this.props.location.pathname === \"/result\") {\n            this.setState({\n                searchQuery: \"\"\n            })\n\n            this.state.results.clearResults();\n            this.map.setView([52.20936, 5.2], 8);\n        }else if(match){\n            this.state.results.clearClickedResult();\n\n            let bounds = this.markerGroup.getBounds();\n            let width = bounds.getEast() - bounds.getWest();\n\n            if(width > 2){\n                this.map.fitBounds(this.markerGroup.getBounds());\n            }else{\n                this.map.fitBounds(this.markerGroup.getBounds().pad(0.8));\n            }\n        }\n\n    }\n\n    update = () => {\n        let results = this.state.results;\n\n        this.setState({\n            results: results\n        })\n\n        this.markerGroup.clearLayers();\n        this.geoJsonLayer.clearLayers();\n\n        if (this.state.results.getClickedResult()) {\n            let feature = this.state.results.getClickedResult().getAsFeature();\n            this.geoJsonLayer.addData(feature);\n        } else {\n            if (this.state.results.getClickedResult()) {\n                console.log(\"fout\");\n            }\n            let geoJsonResults = results.getAllObjectsAsFeature();\n            this.geoJsonLayer.addData(geoJsonResults);\n        }\n    }\n\n    render() {\n        let icon;\n\n        if (this.state.searchQuery) {\n            icon = <Icon name='delete' link onClick={this.handleDeleteClick}/>;\n        } else {\n            icon = <Icon name='search'/>;\n        }\n\n        return (\n            <section className=\"App\">\n                <div className=\"brtInfo\">\n                    <Link to=\"/\" onClick={() => {\n                        this.setState({searchQuery: \"\"});\n                        this.state.results.clearResults();\n                    }}>\n                        <div className=\"header\">\n                            <h1>Basisregistratie Topografie</h1><img src={KadasterImg} alt=\"kadaster logo\"/>\n                        </div>\n                    </Link>\n                    <div className=\"searchBar\">\n                        <Search input={{fluid: true}}\n                                value={this.state.searchQuery}\n                                noResultsMessage=\"Geen resultaat\"\n                                icon={icon}\n                                onSearchChange={this.onSearchChange}\n                                open={false}\n                        />\n                    </div>\n                    {/*TODO maak hier een swipe animation*/}\n                    <div className=\"resultsContainer\">\n                        <NavBar\n                            loading={this.state.isFetching}\n                            onBack={this.handleOnBackButtonClick}\n                        />\n                        <div className=\"loaderDiv\">\n                            <Loader\n                                loading={this.state.isFetching}\n                            />\n                        </div>\n                        <div className=\"resultPartContainer\">\n                            <Routes\n                                res={this.state.results}\n                                clickedResult={this.state.results.getClickedResult()}\n                                onClickItem={this.onClickItem}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"footer\">\n                        <a href=\"https://zakelijk.kadaster.nl/brt\">Leer meer over de brt</a>\n                    </div>\n                </div>\n                <div id=\"map\"/>\n            </section>\n        )\n    }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <HashRouter>\n        <App/>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}